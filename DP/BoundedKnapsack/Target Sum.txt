You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000


MyCode:

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum =0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
        }
        
        int s1 = (target+sum)/2;
        if(target>s1) 
            return 0;
        if((target+sum)%2!=0)
            return 0;
        
        int[][] dp =  new int[s1+1][nums.length+1];
        for(int i=0;i<=s1;i++)
            dp[i][0]=0;
       // for(int i=0;i<=nums.length;i++)
            dp[0][0]=1;
        
        for(int i=0;i<=s1;i++)
        {
            for(int j=1;j<=nums.length;j++)
            {
                dp[i][j] = dp[i][j-1];
                if(i>=nums[j-1])
                    dp[i][j] = dp[i][j-1]  + dp[i-nums[j-1]][j-1];
            }
        }
        
        return  dp[s1][nums.length];
    }
}









class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum =0;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
        }
        if(target > sum){
            return 0;
        }
        else{
            return (target+sum)%2 ==0? subsetCount(nums,(target+sum)/2):0;
        }
    }
        
        private int subsetCount(int[] nums, int target){
            int n = nums.length;
            int dp[][] = new int[1002][1002];
            dp[0][0] = 1;
        
            for(int i=1;i<=n;i++){
                for(int j=0; j<=target; j++){
                    if(i == 0 && j != 0){
                        dp[i][j] = 0;
                    }
                    if(nums[i-1] <= j){
                        dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                    }
                    else{
                        dp[i][j] = dp[i-1][j];
                    }
                }
            }
            return dp[n][target];
        }           
}