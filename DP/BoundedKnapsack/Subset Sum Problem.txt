Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.
Example 2:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function isSubsetSum() which takes the array arr[], its size N and an integer sum as input parameters and returns boolean value true if there exists a subset with given sum and false otherwise.
The driver code itself prints 1, if returned value is true and prints 0 if returned value is false.
 

Expected Time Complexity: O(sum*N)
Expected Auxiliary Space: O(sum*N)
 

Constraints:
1 <= N <= 100
1<= arr[i] <= 100
1<= sum <= 105


//Method 1 - recursive - time limit exceed

class Solution{


    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        
       /* if(N==0)  return false;
        if(sum==0)  return true;
        
        if(arr[N-1]<=sum)
            return isSubsetSum(N-1,arr,sum-arr[N-1]) || isSubsetSum(N-1,arr,sum);
        else
            return isSubsetSum(N-1,arr,sum);*/
            }
}


//Method 2 - top down
class Solution{
    static Boolean isSubsetSum(int N, int arr[], int sum){
        boolean[][] dp = new boolean[sum+1][arr.length+1];
        
        for(int i=0;i<=sum;i++)
            dp[i][0] = false;
        for(int i=0;i<=arr.length;i++)
            dp[0][i] = true;
            
        for(int i=1;i<=sum;i++)
        {
            for(int j=1;j<=arr.length;j++)
            {
                
                dp[i][j] = dp[i][j-1];
                if(i>=arr[j-1])
                    dp[i][j] = dp[i][j-1] || dp[i-arr[j-1]][j-1];
            }
        }
        
        return dp[sum][arr.length];
    }
}