Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
Example 3:

Input: s = "a"
Output: "a"
Example 4:

Input: s = "ac"
Output: "a"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.


//Brute force - time limit exceeds

class Solution {
    
    public boolean isPalin(String res, int i,int j)
    {
        while(i<j)
        {
            if(res.charAt(i++)!=res.charAt(j--))
                return false;
        }
        return true;
    }
    
    
    public String longestPalindrome(String s) {
        
        if(s.length()==0 || s.length()==1)
            return s;
        String ans = "";
        for(int i=0;i<s.length()+1;i++)
        {
            for(int j=i+1;j<s.length()+1;j++)
            {
                if(isPalin(s.substring(i,j),0,s.substring(i,j).length()-1))
                    if(s.substring(i,j).length()>ans.length())
                        ans =s.substring(i,j);
            }
        }
        return ans;
    }
}



//DP appraoch - accepted- too many edge cases

class Solution {
    public String longestPalindrome(String s) {
        int[][] dp = new int[s.length()][s.length()];
        
        if(s.length()==1 || (s.length()==2 && s.charAt(0)==s.charAt(1)))
            return s;
        if(s.length()==2 && s.charAt(0)!=s.charAt(1))
            return s.substring(0,1);
        String ans="";
        
        for(int i=0;i<s.length();i++)
        {
            dp[i][i]=1;
            ans = s.substring(i,i+1);
        }
        
        for(int i=0;i<s.length()-1;i++)
        {
            if(s.charAt(i)==s.charAt(i+1))
            {
                dp[i][i+1]=1;
                ans = s.substring(i,i+2);
            }
        }
               
        
        for(int i=s.length()-3;i>=0;i--)
        {
            for(int j=s.length()-1;j>=2;j--)
            {
                if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]==1)
                {
                    dp[i][j] = 1;
                    if(Math.abs(j-i)+1>ans.length())
                        ans = s.substring(i,j+1);
                }
                
            }
        }

        return ans;
    }
}