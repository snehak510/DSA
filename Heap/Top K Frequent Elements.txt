Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.




class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i:nums)
            map.put(i,map.getOrDefault(i,0)+1);
        PriorityQueue<Map.Entry<Integer,Integer>> heap = new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));
        for(Map.Entry m:map.entrySet())
        {
            heap.add(m);
        }
        
        int[] ans = new int[ k ];

        int i = 0;
        while (k>0 ) {
            // System.out.println(heap.peek());
            ans[ i ] = heap.poll().getKey();
            i++;
            k--;
        }
            
        return ans;
    }
}