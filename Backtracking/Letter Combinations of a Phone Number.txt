https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].


class Solution {
    
    String[] data = new String[]{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    List<String> result;
    
    void dfs(int len,String digits, StringBuilder temp )
    {
        if(len==digits.length())
        {
            result.add(temp.toString());
            return;
        }
        
        char digitValue = digits.charAt(len);
        String letter = data[digitValue-'0'];
        for(char c:letter.toCharArray())
        {
            temp.append(c);
            dfs(len+1,digits,temp);
            temp.deleteCharAt(temp.length()-1);
        }
        
    }
    public List<String> letterCombinations(String digits) {
        result = new ArrayList<>();
        if(digits.length()==0)
            return result;
        dfs(0,digits,new StringBuilder());
        return result;
    }
}