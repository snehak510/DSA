Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20
1 <= k <= n


class Solution {
    
    List<List<Integer>> ans = new ArrayList();
    
    public void dfs(int n,int k, List<Integer> list,int start,int end)
    {
        if(list.size()==k)
        {
            ans.add(new ArrayList(list));
        }
        else
        {
            for(int i =start;i<=end;i++)
            {
                list.add(i);
                dfs(n,k,list,i+1,end);
                list.remove(list.size()-1);
            }
        }
    }
    public List<List<Integer>> combine(int n, int k) {
        dfs(n,k,new ArrayList(),1,n);
        return ans;
        
    }
}