Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


class Solution {
    
    List<List<Integer>> list = new ArrayList();
    
    public void dfs(List<Integer> l, int[] nums)
    {
        if(l.size()==nums.length)
        {
            list.add(new ArrayList(l));
            return;
        }
        
        for(int i=0;i<nums.length;i++)
        {
            if(l.contains(nums[i])) continue;
            l.add(nums[i]);
            dfs(l,nums);
            l.remove(l.size()-1);       
        }
    }
    
    public List<List<Integer>> permute(int[] nums) {
        dfs(new ArrayList(),nums);
        return list;
    }
}