Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?



//my method
class Solution {
    public void setZeroes(int[][] matrix) {
        
        List<List<Integer>> list = new ArrayList();
        int row = matrix.length;
        int col = matrix[0].length;
        int i=0,j=0,flag=0;
        
        while(i<row)
        {
            j=0;
            while(j<col)
            {
                if(matrix[i][j]==0)
                {
                    int temp =0;
                    while(temp<row)
                    {
                        matrix[temp][j]= matrix[temp][j]!=0?-10000:0;
                        temp++;
                    }
                    int temp1=0;
                    while(temp1<col)
                    {
                        matrix[i][temp1]= matrix[i][temp1]!=0?-10000:0;
                        temp1++;
                    }
                }
                j++;
            }
            i++;
        }
        
        for(int r=0;r<row;r++)
        {
            for(int c=0;c<col;c++)
            {
                int max = -10000;
                int val = matrix[r][c];
                if(val==max)
                    matrix[r][c]=0;
            }
        }
        
        
    }
}


//Method 1

class Solution {
  public void setZeroes(int[][] matrix) {
    int R = matrix.length;
    int C = matrix[0].length;
    Set<Integer> rows = new HashSet<Integer>();
    Set<Integer> cols = new HashSet<Integer>();

    // Essentially, we mark the rows and columns that are to be made zero
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (matrix[i][j] == 0) {
          rows.add(i);
          cols.add(j);
        }
      }
    }

    // Iterate over the array once again and using the rows and cols sets, update the elements.
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (rows.contains(i) || cols.contains(j)) {
          matrix[i][j] = 0;
        }
      }
    }
  }
}



//Method 2

class Solution {
    public void setZeroes(int[][] matrix) {
        
        boolean frow= false, fcol = false;
        int row = matrix.length, col = matrix[0].length;
        
        for(int i=0;i<row;i++)
        {
            if(matrix[i][0]==0) frow=true;
        }
        for(int i=0;i<col;i++)
        {
            if(matrix[0][i]==0) fcol=true;
        }
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(matrix[i][j]==0)
                {
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        
        for(int i=1;i<row;i++)
        {
            for(int j=1;j<col;j++)
            {
                if(matrix[i][0]==0 || matrix[0][j]==0)
                {
                    matrix[i][j]=0;
                }
            }
        }
        if(frow==true)
        {
            for(int i=0;i<row;i++)
            {
                matrix[i][0]=0;
            }
        }
        if(fcol==true)
        {
            for(int i=0;i<col;i++)
                matrix[0][i]=0;
        }
        
    }
}


Method 3

class Solution {
  public void setZeroes(int[][] matrix) {
    Boolean isCol = false;
    int R = matrix.length;
    int C = matrix[0].length;

    for (int i = 0; i < R; i++) {

      // Since first cell for both first row and first column is the same i.e. matrix[0][0]
      // We can use an additional variable for either the first row/column.
      // For this solution we are using an additional variable for the first column
      // and using matrix[0][0] for the first row.
      if (matrix[i][0] == 0) {
        isCol = true;
      }

      for (int j = 1; j < C; j++) {
        // If an element is zero, we set the first element of the corresponding row and column to 0
        if (matrix[i][j] == 0) {
          matrix[0][j] = 0;
          matrix[i][0] = 0;
        }
      }
    }

    // Iterate over the array once again and using the first row and first column, update the elements.
    for (int i = 1; i < R; i++) {
      for (int j = 1; j < C; j++) {
        if (matrix[i][0] == 0 || matrix[0][j] == 0) {
          matrix[i][j] = 0;
        }
      }
    }

    // See if the first row needs to be set to zero as well
    if (matrix[0][0] == 0) {
      for (int j = 0; j < C; j++) {
        matrix[0][j] = 0;
      }
    }

    // See if the first column needs to be set to zero as well
    if (isCol) {
      for (int i = 0; i < R; i++) {
        matrix[i][0] = 0;
      }
    }
  }
}