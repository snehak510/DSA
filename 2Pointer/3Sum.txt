Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105



class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList();
        if(nums.length<3)
            return list;
        
        Arrays.sort(nums);
        
        for(int i=0;i<nums.length-2;i++)
        {
            if(i>0 && nums[i]==nums[i-1]) continue;
            int start = i+1;
            int end = nums.length-1;
            
            while(start<end)
            {
                int sum = nums[i] + nums[start] + nums[end];
                if(sum==0)
                {
                    List<Integer> triplets = new ArrayList();
                    triplets.add(nums[i]);
                    triplets.add(nums[start]);
                    triplets.add(nums[end]);
                    list.add(triplets);
                    end--;
                    start++;
                    
                    while(start < end && nums[start]==nums[start-1])
                        start++;
                    while(start<end && nums[end]==nums[end+1])
                        end--;
                 }
                else if(sum<0)
                    start++;
                else
                    end--;                    
            }
        }
        return list;
    }
}