Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104



class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b)->(a[0]-b[0]));
        Stack<int[]> stack = new Stack<int[]>();

        stack.push(intervals[0]);

        for(int i=1;i<intervals.length;i++)
        {
            int[] element = stack.peek();
            if(intervals[i][0]<=element[1])
            {
                if(intervals[i][1]>element[1])
                {
                    stack.pop();
                    stack.push(new int[]{element[0],intervals[i][1]});
                }
            }
            else
                stack.push(intervals[i]);
        }
        return stack.toArray(new int[stack.size()][2]);
    }
}


// Mthod 2 

class Solution {
    public int[][] merge(int[][] intervals) {
    Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0]));
        List<int[]> res=new ArrayList<>();
        int low=intervals[0][0];
        int high=intervals[0][1];

        for(int i=1;i<intervals.length;i++)
        {
           if(intervals[i][0]<=high){
               if(high<intervals[i][1])
               high=intervals[i][1];
           }
           else{
               res.add(new int[]{low,high});
               low=intervals[i][0];
               high=intervals[i][1];
           }
        }
        res.add(new int[]{low,high});  
       return res.toArray(new int[0][]);     
    }
}