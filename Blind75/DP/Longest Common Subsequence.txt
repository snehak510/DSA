Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.



//Method 1 = recursive -time limit exceeded

class Solution {

    public int LCS(String text1, String text2, int n, int m)
    {
         if(n==0 | m==0)
            return 0;
        if(text1.charAt(n-1)==text2.charAt(m-1))
            return 1 + LCS(text1,text2,n-1,m-1);
        else
            return Math.max(LCS(text1,text2,n-1,m), LCS(text1,text2,n,m-1));
    }

    public int longestCommonSubsequence(String text1, String text2) {
        return LCS(text1,text2,text1.length(),text2.length());
       
    }
}


//Method 2 - Dp

class Solution {

    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
       int[][] dp = new int[text1.length()+1][text2.length()+1];

       for(int i=0;i<m+1;i++)
       {
           for(int j=0;j<n+1;j++)
           {
               if(i==0 || j==0)
                    dp[i][j] = 0;
                else if(text1.charAt(i-1)==text2.charAt(j-1))
                    dp[i][j] = 1+dp[i-1][j-1];
                else
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);

           }
       }
       return dp[m][n];
    }
}