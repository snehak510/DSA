 public static int findMaxSumPath(Node root, AtomicInteger max_sum)
    {
        // base case: empty tree
        if (root == null) {
            return 0;
        }
 
        // find the maximum sum node-to-leaf path starting from the left child
        int left = findMaxSumPath(root.left, max_sum);
 
        // find the maximum sum node-to-leaf path starting from the right child
        int right = findMaxSumPath(root.right, max_sum);
 
        // it is important to return the maximum sum node-to-leaf path starting
        // from the current node
 
        // case 1: left child is null
        if (root.left == null) {
            return right + root.data;
        }
 
        // case 2: right child is null
        if (root.right == null) {
            return left + root.data;
        }
 
        // find the maximum sum path "through" the current node
        int cur_sum = left + right + root.data;
 
        // update the maximum sum path found so far (Note that maximum sum path
        // "excluding" the current node in the subtree rooted at the current node
        // is already updated as we are doing postorder traversal)
 
        max_sum.set(Math.max(cur_sum, max_sum.get()));
 
        // case 3: both left and right child exists
        return Math.max(left, right) + root.data;
    }