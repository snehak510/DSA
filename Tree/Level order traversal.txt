Given a binary tree, find its level order traversal.
Level order traversal of a tree is breadth-first traversal for the tree.


Example 1:

Input:
    1
  /   \ 
 3     2
Output:1 3 2
Example 2:

Input:
        10
     /      \
    20       30
  /   \
 40   60
Output:10 20 30 40 60 N N

Your Task:
You don't have to take any input. Complete the function levelOrder() that takes the root node as input parameter and returns a list of integers containing the level order traversal of the given Binary Tree.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
1 ≤ Number of nodes ≤ 105
1 ≤ Data of a node ≤ 105



Given a binary tree, find its level order traversal.
Level order traversal of a tree is breadth-first traversal for the tree.


Example 1:

Input:
    1
  /   \ 
 3     2
Output:1 3 2
Example 2:

Input:
        10
     /      \
    20       30
  /   \
 40   60
Output:10 20 30 40 60 N N

Your Task:
You don't have to take any input. Complete the function levelOrder() that takes the root node as input parameter and returns a list of integers containing the level order traversal of the given Binary Tree.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
1 ≤ Number of nodes ≤ 105
1 ≤ Data of a node ≤ 105




///recursive


class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/
class Solution
{
    //Function to return the level order traversal of a tree.
    static int Height(Node root)
    {
        if(root==null)
            return 0;
        int leftHeight = Height(root.left);
        int rightHeight = Height(root.right);
        if(leftHeight>rightHeight)
            return leftHeight +1;
        return rightHeight+1;
    }
    
    static void levelOrderTrav(Node root,int level,ArrayList<Integer> list)
    {
        if(root==null)
            return;
        if(level==1)
            list.add(root.data);
        else if(level>1)
        {
            levelOrderTrav(root.left,level-1,list);
            levelOrderTrav(root.right,level-1,list);
        }
    }
    
    static ArrayList <Integer> levelOrder(Node node) 
    {
        ArrayList<Integer> list = new ArrayList<Integer>();
        int height = Height(node);
        for(int i=1;i<=height;i++)
            levelOrderTrav(node,i,list);
        return list;
    }
}



// using queue impl

class Solution
{
    //Function to return the level order traversal of a tree.
    
    static ArrayList <Integer> levelOrder(Node node) 
    {
        ArrayList<Integer> list = new ArrayList<Integer>();
        Queue<Node> queue = new LinkedList<Node>();
        queue.add(node);
        
        while(!queue.isEmpty())
        {
            Node tempNode = queue.poll();
            list.add(tempNode.data);
            if(tempNode.left!=null)
                queue.add(tempNode.left);
            if(tempNode.right!=null)
                queue.add(tempNode.right);
        }
        return list;
    }
}




