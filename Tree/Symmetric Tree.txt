Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean Symmetric(TreeNode left, TreeNode right)
    {
        if(left==null && right==null)
            return true;
        if((left!=null && right==null) || (left==null && right!=null))
         {
            System.out.println("here");
            return false;
        }
         boolean m1 = Symmetric(left.left,right.right);
        boolean m2 = (left.val==right.val);
          boolean m3 = Symmetric(right.left,left.right);
           return (m1 && m2 && m3);
    }
    public boolean isSymmetric(TreeNode root) {
        if(root==null)
            return true;
        return Symmetric(root.left,root.right);
        
    }
}