Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.


class Solution {

    public void dfs(int i,int j,char[][] board,boolean[][] visited)
    {        
        if(i<0 || j<0 || i>=board.length || j>=board[0].length || board[i][j]=='X' || visited[i][j] )
            return;
        
        System.out.println(i+" "+j+" "+visited[i][j]);
        visited[i][j]=true;
        dfs(i-1,j,board,visited);
        dfs(i,j-1,board,visited);
        dfs(i,j+1,board,visited);
        dfs(i+1,j,board,visited);
    }

    boolean[][] visited;;
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;

        visited = new boolean[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
               // System.out.println(board[i][j]);
                if(board[i][j]=='O' && !visited[i][j] && (i==0 || j==0 || i==m-1 || j==n-1))
                    {
                        //visited[i][j]=true;
                       System.out.println("started");
                        dfs(i,j,board,visited);
                    }
            }
        }

         for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            { 
                if(!visited[i][j] && board[i][j]=='O')
                    board[i][j]='X';
            }
        }
    }
}