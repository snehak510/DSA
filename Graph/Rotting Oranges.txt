You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.


//MEthod 1 : BFS

class Solution {
    public void init(Queue<int[]> q, int[][] grid)
    {
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==2)
                    q.add(new int[]{i,j});
            }
        }
    }
    public int orangesRotting(int[][] grid) {
        int time = 0;

        Queue<int[]> q = new LinkedList<int[]>();
        init(q,grid);

        int[][] dir = {{-1,0},{1,0},{0,-1},{0,1}};
        while(!q.isEmpty())
        {
            int size = q.size();
                time++;
            while(size-->0)
            {   
                int[] cell = q.poll();
                for(int[] i:dir)
                {
                    int r = cell[0] + i[0];
                    int c = cell[1] + i[1];
                    if(r<0 || c<0 || r>grid.length-1 || c>grid[0].length-1 || grid[r][c]!=1) continue;
                    grid[r][c]=2;
                    q.add(new int[]{r,c});
                }
            }
        }

        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==1)
                    return -1;
            }
        }
        return time==0?0:time-1;
    }
}


/Method 2 : DFS

