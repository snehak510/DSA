Given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph..


Example 1:

Input:

Output: 0 1 2 4 3
Explanation: 
0 is connected to 1, 2, 4.
1 is connected to 0.
2 is connected to 0.
3 is connected to 4.
4 is connected to 0, 3.
so starting from 0, it will go to 1 then 2
then 4, and then from 4 to 3.
Thus dfs will be 0 1 2 4 3.
Example 2:

Input:

Output: 0 1 2 3
Explanation:
0 is connected to 1 , 3.
1 is connected to 2. 
2 is connected to 1.
3 is connected to 0. 
so starting from 0, it will go to 1 then 2
then back to 0 then 0 to 3
thus dfs will be 0 1 2 3. 

Your task:
You don’t need to read input or print anything. Your task is to complete the function dfsOfGraph() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns  a list containing the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 104


class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    
    public ArrayList<Integer> dfs(int s,boolean[] vis,ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> arr)
    {
        vis[s]=true;
        arr.add(s);
        for(int i:adj.get(s))
        {
            if(!vis[i])
                dfs(i,vis,adj,arr);
        }
        return arr;
    }
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V]; 
        ArrayList<Integer> arr = new ArrayList<>();
        return dfs(0,visited,adj,arr);
    }
}


/// Iterative

 ArrayList<HashSet<Integer>> list = new ArrayList<HashSet<Integer>>();
        
        for(int i =0;i<n;i++)
            list.add(new HashSet());
        
        for(int[] e:edges)
        {
            list.get(e[0]).add(e[1]);
            list.get(e[1]).add(e[0]);
        }
        
        boolean[] visited = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        visited[start]=true;
        while(!q.isEmpty())
        {
            int  temp = q.poll();
            if(temp == end) return true;
            for(int i:list.get(temp))
            {
                if(!visited[i])
                {
                    visited[i]=true;
                    q.add(i);
                }
            }
        }
        
        return false;
    }
}