There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]


class Solution {

    public void dfs(int i, int[] visitor,ArrayList<ArrayList<Integer>> adjls)
    {
        
        visitor[i]=1;

       for(int j:adjls.get(i))
       {
           if(visitor[j]!=1)
            dfs(j,visitor,adjls);
       }
    }
    public int findCircleNum(int[][] isConnected) {

        ArrayList<ArrayList<Integer>> adjls = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<isConnected.length;i++)
            adjls.add(new ArrayList<Integer>());
        for(int i=0;i<isConnected.length;i++)
        {
            for(int j=0;j<isConnected[0].length;j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                    adjls.get(i).add(j);
                    adjls.get(j).add(i);
                }
            }
        }


        int count =0;
        int[] visitor = new int[isConnected.length];
        for(int i=0;i<adjls.size();i++)
        {
                if(visitor[i]!=1)
                {
                    count++;
                    dfs(i,visitor,adjls);
                }
        }

       return count;
    }
}