Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You don’t need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105


class Solution {
    // Function to detect cycle in a directed graph.
    
    boolean isCyclic_util(ArrayList<ArrayList<Integer>> adj,int i, boolean[] visited, boolean[] recstack)
{
    if(recstack[i])
        return true;
    if (visited[i])
        return false;
    visited[i] = true;
    recstack[i] = true;
    
    ArrayList<Integer> children = adj.get(i);
    for(int c:children)
        if(isCyclic_util(adj,c,visited,recstack))
            return true;
    
    recstack[i]=false;
    return false;
}
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] recstack = new boolean[V];
        boolean[] visited = new boolean[V];
        
        for(int i=0;i<V;i++)
        {
            if(isCyclic_util(adj,i,visited,recstack))
                return true;
        }
        return false;
        
    }
}
/*6 5