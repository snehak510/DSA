You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105


// O(n) space and O(n) time 

class Solution {
    public int singleNonDuplicate(int[] nums) {
       
        HashMap<Integer,Integer> map = new HashMap();
        
        for(int i:nums)
            map.put(i,map.getOrDefault(i,0)+1);
        
        for(Map.Entry<Integer,Integer> m:map.entrySet())
        {
            if(m.getValue()==1)
                return m.getKey();
        }
        return 0;
        
    }
}


// O(1) and O(logN)

class Solution {
    public int singleNonDuplicate(int[] nums) {
       
          if(nums.length==1) return nums[0];
        int l = 0;
        int h = nums.length-1;
        
        while(l<h){
            int mid = l+(h-l)/2;      // divide the array
            
            if(nums[mid]==nums[mid+1]) mid = mid-1;      //two same elements should be in same half
            
            if((mid-l+1)%2!=0) h = mid;            // checking the length of left half. If its is odd then update ur right pointer to mid
            
            else l = mid+1;    // else your right half will be odd then update your left pointer to mid+1
        }
        
        return nums[l];    
    }
}
